// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: pkg/api/stock_price.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StockPriceService_GetStockPrice_FullMethodName       = "/stock_price.StockPriceService/GetStockPrice"
	StockPriceService_GetStockPriceStream_FullMethodName = "/stock_price.StockPriceService/GetStockPriceStream"
)

// StockPriceServiceClient is the client API for StockPriceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StockPriceServiceClient interface {
	GetStockPrice(ctx context.Context, in *StockPriceRequest, opts ...grpc.CallOption) (*StockPriceResponse, error)
	GetStockPriceStream(ctx context.Context, in *StockPriceRequest, opts ...grpc.CallOption) (StockPriceService_GetStockPriceStreamClient, error)
}

type stockPriceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStockPriceServiceClient(cc grpc.ClientConnInterface) StockPriceServiceClient {
	return &stockPriceServiceClient{cc}
}

func (c *stockPriceServiceClient) GetStockPrice(ctx context.Context, in *StockPriceRequest, opts ...grpc.CallOption) (*StockPriceResponse, error) {
	out := new(StockPriceResponse)
	err := c.cc.Invoke(ctx, StockPriceService_GetStockPrice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stockPriceServiceClient) GetStockPriceStream(ctx context.Context, in *StockPriceRequest, opts ...grpc.CallOption) (StockPriceService_GetStockPriceStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &StockPriceService_ServiceDesc.Streams[0], StockPriceService_GetStockPriceStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &stockPriceServiceGetStockPriceStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StockPriceService_GetStockPriceStreamClient interface {
	Recv() (*StockPriceResponse, error)
	grpc.ClientStream
}

type stockPriceServiceGetStockPriceStreamClient struct {
	grpc.ClientStream
}

func (x *stockPriceServiceGetStockPriceStreamClient) Recv() (*StockPriceResponse, error) {
	m := new(StockPriceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StockPriceServiceServer is the server API for StockPriceService service.
// All implementations must embed UnimplementedStockPriceServiceServer
// for forward compatibility
type StockPriceServiceServer interface {
	GetStockPrice(context.Context, *StockPriceRequest) (*StockPriceResponse, error)
	GetStockPriceStream(*StockPriceRequest, StockPriceService_GetStockPriceStreamServer) error
	mustEmbedUnimplementedStockPriceServiceServer()
}

// UnimplementedStockPriceServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStockPriceServiceServer struct {
}

func (UnimplementedStockPriceServiceServer) GetStockPrice(context.Context, *StockPriceRequest) (*StockPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStockPrice not implemented")
}
func (UnimplementedStockPriceServiceServer) GetStockPriceStream(*StockPriceRequest, StockPriceService_GetStockPriceStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method GetStockPriceStream not implemented")
}
func (UnimplementedStockPriceServiceServer) mustEmbedUnimplementedStockPriceServiceServer() {}

// UnsafeStockPriceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StockPriceServiceServer will
// result in compilation errors.
type UnsafeStockPriceServiceServer interface {
	mustEmbedUnimplementedStockPriceServiceServer()
}

func RegisterStockPriceServiceServer(s grpc.ServiceRegistrar, srv StockPriceServiceServer) {
	s.RegisterService(&StockPriceService_ServiceDesc, srv)
}

func _StockPriceService_GetStockPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StockPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StockPriceServiceServer).GetStockPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StockPriceService_GetStockPrice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StockPriceServiceServer).GetStockPrice(ctx, req.(*StockPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StockPriceService_GetStockPriceStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StockPriceRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StockPriceServiceServer).GetStockPriceStream(m, &stockPriceServiceGetStockPriceStreamServer{stream})
}

type StockPriceService_GetStockPriceStreamServer interface {
	Send(*StockPriceResponse) error
	grpc.ServerStream
}

type stockPriceServiceGetStockPriceStreamServer struct {
	grpc.ServerStream
}

func (x *stockPriceServiceGetStockPriceStreamServer) Send(m *StockPriceResponse) error {
	return x.ServerStream.SendMsg(m)
}

// StockPriceService_ServiceDesc is the grpc.ServiceDesc for StockPriceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StockPriceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stock_price.StockPriceService",
	HandlerType: (*StockPriceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStockPrice",
			Handler:    _StockPriceService_GetStockPrice_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetStockPriceStream",
			Handler:       _StockPriceService_GetStockPriceStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/api/stock_price.proto",
}
